server:
  port: 8082

spring:
  application:
    name: consumer

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    hostname: localhost
    prefer-ip-address: true
    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}


# 访问不同的服务可以使用不同的算法规则
provider:   # 服务提供者的应用名
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule  # 算法的全限定类名


ribbon:
  eager-load:
    enabled: true   # ribbon需要去eureka获取服务列表 false是懒加载（默认false）
  eureka:
    enabled: true
  http: # 使用ribbon 用的restTemplate发请求（封装的）  java.net.HttpUrlConnection发请求（java原生 不支持连接池）
    client: # 发请求的工具很多 httpClient 支持连接池 效率高 如果想使用 改为true
      enabled: false
  okhttp: # 移动端使用比较多的请求工具 轻量级的请求 需要改为true
    enabled: false
